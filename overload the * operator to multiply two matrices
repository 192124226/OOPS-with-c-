#include <iostream>
#include <vector>
class Matrix {
private:
    std::vector<std::vector<int>> data;
    size_t rows;
    size_t cols;

public:
    Matrix(size_t rows, size_t cols, const std::vector<std::vector<int>>& values)
        : rows(rows), cols(cols), data(values) {}
    Matrix operator*(const Matrix& other) const {
        if (cols != other.rows) {
            std::cerr << "Error: Incompatible matrix dimensions for multiplication." << std::endl;
            return Matrix(0, 0, {});
        }

        Matrix result(rows, other.cols, std::vector<std::vector<int>>(rows, std::vector<int>(other.cols, 0)));

        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < other.cols; ++j) {
                for (size_t k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }

        return result;
    }
    void print() const {
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < cols; ++j) {
                std::cout << data[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    Matrix matrix1(2, 3, {{1, 2, 3}, {4, 5, 6}});
    Matrix matrix2(3, 2, {{7, 8}, {9, 10}, {11, 12}});
    Matrix result = matrix1 * matrix2;
    std::cout << "Matrix 1:" << std::endl;
    matrix1.print();
    std::cout << std::endl;

    std::cout << "Matrix 2:" << std::endl;
    matrix2.print();
    std::cout << std::endl;

    std::cout << "Result of Matrix Multiplication:" << std::endl;
    result.print();

    return 0;
}
