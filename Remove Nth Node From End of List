struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

ListNode* removeNthFromEnd(ListNode* head, int n) {
    ListNode dummyHead{-1}, *fastPtr = &dummyHead, *slowPtr = &dummyHead;
    dummyHead.next = head;

    for (int i = 0; i < n + 1; ++i) {
        fastPtr = fastPtr->next;
    }

    while (fastPtr != nullptr) {
        fastPtr = fastPtr->next;
        slowPtr = slowPtr->next;
        if (!fastPtr) {
            slowPtr->next = slowPtr->next->next;
            break;
        }
        fastPtr = fastPtr->next;
    }

    ListNode* removedNode = dummyHead.next;
    dummyHead.next = dummyHead.next->next;
    delete removedNode;

    return dummyHead.next;
}

void printLinkedList(ListNode* head) {
    ListNode* curr = head;
    while (curr != nullptr) {
        std::cout << curr->val << ' ';
        curr = curr->next;
    }
    std::cout << "\n";
}

int main() {
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(4);
    head->next->next->next->next = new ListNode(5);

    int n = 2;
    ListNode* res = removeNthFromEnd(head, n);
    printLinkedList(res);

    delete res;
    return 0;
}
